generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  email         String?       @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime      @default(now())
  status        Boolean       @default(true)
  accounts      Account[]
  codeSnippets  CodeSnippet[]
  sessions      Session[]
  comments      SnippetComment[]
  replies       CommentReplies[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CodeSnippet {
  id          String   @id @default(cuid())
  isPublic    Boolean
  title       String 
  description String
  language    String
  snippet     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posterId    String
  favorites   Int      @default(0)
  user        User     @relation(fields: [posterId], references: [id], onDelete: Cascade)
  comments    SnippetComment[]
}

model SnippetComment {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  commenterId String
  commenterName String
  comment     String
  user        User     @relation(fields: [commenterId], references: [id], onDelete: Cascade)
  codeSnippetId String
  codeSnippet CodeSnippet       @relation(fields: [codeSnippetId], references: [id], onDelete: Cascade)
  replies     CommentReplies[]
}

model CommentReplies{
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  replierId   String
  user        User     @relation(fields: [replierId], references: [id], onDelete: Cascade)
  commentId   String
  comment     SnippetComment     @relation(fields: [commentId], references: [id], onDelete: Cascade)
}